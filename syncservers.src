import_code("library/basic.inc.src")
import_code("library/json/json.src")

programs = get_shell.host_computer.File("/home/bigd")
usrbin = get_shell.host_computer.File("/usr/bin")
bin = get_shell.host_computer.File("/bin")
lib = get_shell.host_computer.File("/lib")

binaries = ["rshell-server", "scanrouter", "decipher", "aircrack", "aireplay", "airmon"]
libs = ["librshell.so", "crypto.so", "metaxploit.so"]

_sync_file = function(remote, source, dest) 
    print("Syncing: " + source)
    res = get_shell.scp(source, dest, remote)
end function

EXE_FILES = ["AdminMonitor.exe", "ScanLan.exe", "ConfigLan.exe", "Notepad.exe", "Browser.exe"]

_sync_bin = function (remote, remoteUser)
    homeDir = "/home/" + remoteUser + "/"
    if(remoteUser == "root") then homeDir = "/root/"

    for f in programs.get_files()
        if f.path.indexOf(".src") != null then continue
        if f.path.indexOf(".conf") != null then continue
        if f.path.indexOf(".txt") != null then continue
        if f.name.indexOf(".") != null then continue
        name = f.name
        print("Syncing: " + name)
        res = get_shell.scp(home_dir + "/" + name, homeDir, remote)
        if typeof(res) != "number" then print("Failed: " + res)
    end for
    for f in EXE_FILES
        name = f.name
        if remote.host_computer.File("/lib/" + name) isa File then return
        print("Syncing: " + name)
        res = get_shell.scp("/usr/bin/" + name, "/usr/bin/", remote)
        if typeof(res) != "number" then print("Failed: " + res)
    end for
    for f in binaries
        name = f
        if remote.host_computer.File("/bin/" + name) isa File then return
        print("Syncing: " + name)
        res = get_shell.scp("/bin/" + name, homeDir, remote)
        if typeof(res) != "number" then print("Failed: " + res)
    end for
    for f in libs
        name = f
        if remote.host_computer.File("/lib/" + name) isa File then return
        print("Syncing: " + name)
        res = get_shell.scp("/lib/" + name, "/lib/", remote)
        if typeof(res) != "number" then print("Failed: " + res)
    end for
end function

servers = JSON.parse(get_shell.host_computer.File(home_dir + "/Config/Map.conf").get_content)

for account in servers["accounts"] 
    server_shell = get_shell.connect_service(account["ip"], 22, account["user"], account["password"])
    if params.len > 0 then
        _sync_file(server_shell, params[0], params[1])
    else 
        _sync_bin(server_shell, account["user"])
    end if
end for

